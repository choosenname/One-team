datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-3.0.x"]
}

model Department {
  id         String   @id @default(uuid())
  department String   @unique
  users      User[]   @relation(name: "DepartmentToUser")
  servers    Server[] @relation(name: "DepartmentToServer")
}

model User {
  id                     String          @id @default(uuid())
  name                   String          @unique
  imageUrl               String?
  password               String
  role                   UserRole        @default(USER)
  servers                Server[]        @relation(name: "ServerToUser")
  channels               Channel[]       @relation(name: "ChannelToUser")
  members                Member[]        @relation(name: "MemberToUser")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  departmentId           String
  department             Department      @relation(name: "DepartmentToUser", fields: [departmentId], references: [id])
  post                   String
  office                 String
  startWork              DateTime
  endWork                DateTime
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
}

model Server {
  id           String     @id @default(uuid())
  name         String
  imageUrl     String
  inviteCode   String     @unique
  userId       String
  user         User       @relation(name: "ServerToUser", fields: [userId], references: [id])
  departmentId String
  department   Department @relation(name: "DepartmentToServer", fields: [departmentId], references: [id])
  members      Member[]   @relation(name: "MemberToServer")
  channels     Channel[]  @relation(name: "ChannelToServer")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([userId])
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  serverId  String
  server    Server     @relation(name: "MemberToServer", fields: [serverId], references: [id], onDelete: Cascade)
  userId    String
  user      User       @relation(name: "MemberToUser", fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]  @relation(name: "MemberToMessage")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([serverId])
  @@index([userId])
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  userId    String
  user      User        @relation(name: "ChannelToUser", fields: [userId], references: [id])
  serverId  String
  server    Server      @relation(name: "ChannelToServer", fields: [serverId], references: [id])
  messages  Message[]   @relation(name: "ChannelToMessage")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Message {
  id              String    @id @default(uuid())
  content         String
  fileUrl         String?
  sourceMessageId String?
  sourceMessage   Message?  @relation(name: "MessageToSourceMessage", fields: [sourceMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reply           Message[] @relation("MessageToSourceMessage")
  memberId        String
  member          Member    @relation(name: "MemberToMessage", fields: [memberId], references: [id])
  channelId       String
  channel         Channel   @relation(name: "ChannelToMessage", fields: [channelId], references: [id])
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberOne      User            @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId    String
  memberTwo      User            @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  isNotify       Boolean         @default(true)
  Background     String?
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  memberId       String
  member         User         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  VIDEO
}
